openapi: 3.0.3
info:
  title: Package
  description: Package will define user have limitations for free or not
  version: v1
servers:
  - url: 'http://localhost:5100/api/v1'
    description: For local mode
  - url: 'https://staging-api.qila.co.id/api/v1'
    description: For staging mode
  - url: 'https://api.qila.co.id/api/v1'
    description: For production mode
paths:
  /packages:
    post:
      tags:
        - Create
      summary: Create a package
      description: Create a package
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
         application/json:
           schema:
             type: object
             required: [
              "user_id"
             ]
             properties:
               user_id:
                 type: string
                 example: ""
               is_free:
                 type: boolean
                 example: true
         multipart/form-data:
           schema:
            type: object
            required: [
             "user_id",
            ]
            properties:
              user_id:
                type: string
              is_free:
                type: boolean
                example: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
                    example: "Create package successfully"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "missing or malformed jwt"
        422:
          description: "Unprocessable Content"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 422
                  message:
                    type: string
                    example: "Unprocessable Content"
                  errors:
                    type: array
                    example: [
                      user_id : ['UserId is a required field'],
                      is_free : ['IsFree is a required field'],
                     ]
    get:
      description: All data package with search
      tags:
        - All Data
      parameters:
        - name: take
          in: query
          required: true
          schema:
            type: integer
            example: 10
        - name: page
          in: query
          required: true
          schema:
            type: integer
            example: 1
        - name: q
          in: query
          required: false
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  data:
                    type: object
                    example: {
                      "limit": 10,
                      "page": 1,
                      "sort": "packages.id desc",
                      "total_rows": 2,
                      "total_pages": 1,
                      "rows": [
                        {
                          "id": "xyz",
                          "user_id": "veSrOGLteBA7z",
                          "user": {
                            "id": "veSrOGLteBA7z",
                            "name": "admin",
                            "email": "admin@qila.co.id",
                            "role_id": "SF%YHm8-XJ^}",
                            "role": {
                              "id": "SF%YHm8-XJ^}",
                              "name": "adm",
                              "created_at": "2024-01-28T07:23:43.147+08:00",
                              "updated_at": "2024-01-28T07:23:43.147+08:00"
                            },
                            "avatar": "assets/images/avatar/default.png",
                            "created_at": "2024-01-28T07:23:43.251+08:00",
                            "updated_at": "2024-01-28T07:23:43.251+08:00"
                          },
                          "is_free": true,
                          "created_at": "0001-01-01T00:00:00Z",
                          "updated_at": "0001-01-01T00:00:00Z"
                        },
                        {
                          "id": "JF2JBUhiDXR3A",
                          "user_id": "veSrOGLteBA7z",
                          "user": {
                            "id": "veSrOGLteBA7z",
                            "name": "admin",
                            "email": "admin@qila.co.id",
                            "role_id": "SF%YHm8-XJ^}",
                            "role": {
                              "id": "SF%YHm8-XJ^}",
                              "name": "adm",
                              "created_at": "2024-01-28T07:23:43.147+08:00",
                              "updated_at": "2024-01-28T07:23:43.147+08:00"
                            },
                            "avatar": "assets/images/avatar/default.png",
                            "created_at": "2024-01-28T07:23:43.251+08:00",
                            "updated_at": "2024-01-28T07:23:43.251+08:00"
                          },
                          "is_free": true,
                          "created_at": "2024-02-01T13:23:23.689+08:00",
                          "updated_at": "2024-02-01T13:23:23.689+08:00"
                        }
                      ]
                    }
  /packages/{id}:
    put:
      tags:
        - Update
      parameters:
        - $ref: '#/components/parameters/path_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [
                "user_id"
              ]
              properties:
                user_id:
                  type: string
                  example: ""
                is_free:
                  type: boolean
                  example: true
          multipart/form-data:
            schema:
              type: object
              required: [
                "user_id",
              ]
              properties:
                user_id:
                  type: string
                is_free:
                  type: boolean
                  example: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "Update package successfully"
        422:
          description: "Unprocessable Content "
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 422
                  message:
                    type: string
                    example: "Unprocessable Content"
                  errors:
                    type: array
                    example: [
                      user_id: [ 'UserId is a required field' ],
                      is_free: [ 'IsFree is a required field' ],
                    ]
    get:
      tags:
        - Find by id
      parameters:
        - $ref: '#/components/parameters/path_id'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  data:
                    type: object
                    example: {
                      "id": "xyz",
                      "user_id": "veSrOGLteBA7z",
                      "user": {
                        "id": "veSrOGLteBA7z",
                        "name": "admin",
                        "email": "admin@qila.co.id",
                        "role_id": "SF%YHm8-XJ^}",
                        "role": {
                          "id": "SF%YHm8-XJ^}",
                          "name": "adm",
                          "created_at": "2024-01-28T07:23:43.147+08:00",
                          "updated_at": "2024-01-28T07:23:43.147+08:00"
                        },
                        "avatar": "assets/images/avatar/default.png",
                        "created_at": "2024-01-28T07:23:43.251+08:00",
                        "updated_at": "2024-01-28T07:23:43.251+08:00"
                      },
                      "is_free": true,
                      "created_at": "0001-01-01T00:00:00Z",
                      "updated_at": "0001-01-01T00:00:00Z"
                    }
        404:
          description: ID not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: "record not found"
                  errors: {}
        400:
          description: Token empty or param not string
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    path_id:
      name: id
      in: path
      required: true
      description: "package id"
      schema:
        type: string

security:
  - bearerAuth: []


  
